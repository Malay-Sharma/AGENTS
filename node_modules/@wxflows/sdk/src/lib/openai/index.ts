// Copyright IBM Corp. 2023, 2024
import wxflows_main, {type WxflowsProps} from '../wxflows.js'

type Input = {
  choices: Choices
}

type Choice = {
  index: number
  message: {
    role: 'assistant'
    content?: string
    tool_calls?: ToolCall[]
  }
  finish_reason: 'stop' | 'continue' | 'error' | string
}

export type ToolCall = {
  id: string
  type: 'function' | string
  // Type for `query` us know, type of other fields not
  operation: {query?: string; [key: string]: any}
  function: {
    name: string
    arguments: string
  }
}

export type ToolResponse = {
  role: string
  tool_call_id: string
  content?: string
}

type Choices = Choice[]

class wxflows extends wxflows_main {
  constructor({endpoint, apikey}: WxflowsProps) {
    super({endpoint, apikey})
  }

  executeTools = async (input: Input) => {
    const {choices} = input

    if (choices?.length > 0) {
      const tool_calls = choices
        .filter(
          (choice) =>
            choice?.finish_reason === 'tool_calls' &&
            choice?.message?.tool_calls?.length &&
            choice?.message?.tool_calls?.length > 0,
        )
        .map((choice) => choice.message.tool_calls)
        .flat()

      const toolCalls = tool_calls.filter(
        (tool_call) => tool_call?.function?.arguments,
      ) as ToolCall[]

      const responses = await Promise.all(
        toolCalls.map(async (toolCall) => {
          const toolResponse: ToolResponse = {
            role: 'tool',
            tool_call_id: toolCall.id,
          }

          try {
            const toolArguments = JSON.parse(toolCall.function.arguments)
            const data = await this.execTool(
              toolCall.function.name,
              toolArguments,
            )
            toolResponse.content = JSON.stringify(data) || ''
          } catch (e) {
            toolResponse.content = ''
          }

          return toolResponse
        }),
      )

      const inputMessages = choices.map((choice) => ({
        ...choice.message,
        content: choice.message.content || '',
      }))

      return [...inputMessages, ...responses]
    }
  }
}

export default wxflows
