// Copyright IBM Corp. 2023, 2025
import { request } from 'graphql-request';
export async function fetchTools({ endpoint, apikey, }) {
    const headers = {
        'Content-Type': 'application/json',
    };
    if (apikey) {
        headers['Authorization'] = `apikey ${apikey}`;
    }
    const query = /* GraphQL */ `
    query {
      tc_tools {
        ...T
      }
    }

    fragment T on TC_Tool {
      type
      __typename
      ... on TC_FunctionTool {
        function {
          name
          description
          parameters {
            type
            properties
            required
          }
        }
      }
    }
  `;
    // console.log(`GraphQL request`)
    // console.log(`  URL: ${endpoint}`)
    // console.log(`  headers: ${JSON.stringify(headers, undefined, 2)}`)
    // console.log(`  document: ${JSON.stringify(query, undefined, 2)}`)
    const data = await request({
        url: endpoint,
        document: query,
        requestHeaders: headers,
    });
    // console.log(`GraphQL response`)
    // console.log(JSON.stringify(data, undefined, 2))
    return data.tc_tools;
}
export function createChatSystemPrompt(tools) {
    return `You are a helpful assistant that is going to assist business users with their questions.
- The output that you generate will be post processed using the Handlebars framework before being sent to the user.
- You will use a series of tools to achieve your goals.
- The tools are using GraphQL. When creating a GraphQL operation always use double quotes for input parameters

These are the tools you have at your disposal:

${JSON.stringify(tools)}

Many tools take jsonata as input.  A few tips and tricks to remember when using jsonata.

## jsonata tips

- KEEP THE JSONATA AS SIMPLE AS POSSIBLE AND ONLY USE FUNCTIONS IF YOU ABSOLUTELY HAVE TO
- Do not start your jsonata with '[].' as the subsequent operation is operating over an empty set. '$[].' may often be a better choice.
- When projecting data from deeper in the json to a higher level this is done using the $.{} operation.  An example
    $.{
      "Name": Name,
      "Description": Description,
      "SKU": SKU,
      "Price": __data__.data.price
      "Child SKU Count": $count(__data__.data.childskus)
    }
- Make use of the '%.' parent operator which can reference values of parent structures
  e.g. '%.orderName' can refer to the orderName of the order that an order line item is a part of
- If you are asked to calculate something, do not put the unit in the value, instead put the unit in the column title, i.e. if you are calculating a number then the result should be a number in the json and NOT a string.  This is due to it potentially being used for further calculations.
- If you do need a function remember that a functions body is made up of one or more expressions
- When an items field name has special characters in it then surround it with double quotes
    for example if a field name is "Price ($s)" then the field can be referenced as '$."Price ($s)"' (don't forget the appropriate prefix based on context e.g. '$.', '$item.', without this the value will just be the field name)
- If you need multiple expressions (in a function) they must be grouped in parenthesis ()
    an example function defintion is below
      $exampleFunction := function($x, $y) {
        (
            $sum := $x + $y;
            $product := $x * $y;
            $sum + $product
        )
      };
- When using the $sort function remember that it's signature is $sort(array, function)
    simple example - $sort($, "displayName")
    more complicated example - $sort($, function($a, $b) { $a.displayName > $b.displayName })
- The $millis() function returns the number of milliseconds since the Unix Epoch (1 January, 1970 UTC) as a number
    Example
    $millis() => 1502700297574
- When using the $map() function remember that it's signature is $map(array, function)
    Examples
      $map([1..5], $string) => ["1", "2", "3", "4", "5"]

      $map(Email.address, function($v, $i, $a) {
        'Item ' & ($i+1) & ' of ' & $count($a) & ': ' & $v
      })
`;
}
export async function fetchOpenAIChatContent({ endpoint, apikey, messages, tools, }) {
    const fetchSingleOpenAIChatContent = async () => {
        const headers = {
            'Content-Type': 'application/json',
        };
        if (apikey) {
            headers['Authorization'] = `apikey ${apikey}`;
        }
        const query = /* GraphQL */ `
      query AgentCalling($messages: InputMessages, $tools: [TC_ToolInput]) {
        openAI_ChatContent(
          max_tokens: 500
          model: "gpt-4-turbo"
          messages: $messages
          tools: $tools
        ) {
          finish_reason
          message {
            role
            content
            tool_calls {
              id
              type
              function {
                arguments
                name
                result {
                  data
                }
              }
            }
          }
        }
      }
    `;
        const variables = {
            messages,
            tools,
        };
        // console.log(`GraphQL request`)
        // console.log(`  URL: ${endpoint}`)
        // console.log(`  headers: ${JSON.stringify(headers, undefined, 2)}`)
        // console.log(`  document: ${JSON.stringify(query, undefined, 2)}`)
        // console.log(`  variables: ${JSON.stringify(variables, undefined, 2)}`)
        const data = await request({
            url: endpoint,
            document: query,
            variables,
            requestHeaders: headers,
        });
        // console.log(`GraphQL response`)
        // console.log(JSON.stringify(data, undefined, 2))
        return data.openAI_ChatContent;
    };
    const result = await fetchSingleOpenAIChatContent();
    if (result?.[0]?.finish_reason === 'tool_calls' &&
        result[0].message?.role === 'assistant') {
        messages.push({
            role: result[0].message.role,
            content: result[0].message.content,
            tool_calls: result[0].message.tool_calls,
        });
        if (result[0].message.tool_calls) {
            const toolCallMessages = result[0].message.tool_calls.map((tool_call) => {
                if (tool_call.id === undefined || tool_call.function === undefined) {
                    return undefined;
                }
                return {
                    role: 'tool',
                    tool_call_id: tool_call.id,
                    content: [
                        {
                            type: 'text',
                            text: JSON.stringify(tool_call.function.result),
                        },
                    ],
                };
            });
            messages.push(...toolCallMessages.filter(Boolean));
        }
        return fetchOpenAIChatContent({ endpoint, apikey, messages, tools });
    }
    const message = result?.[0].message || {
        role: 'assistant',
        content: '',
    };
    messages.push(message);
    return message;
}
//# sourceMappingURL=chat.js.map