export type ChatMessage = {
    role: 'assistant' | 'system' | 'user';
    content: string | null;
    tool_calls?: Array<WxflowsToolCall>;
} | {
    role: 'tool';
    tool_call_id: string;
    content: Array<{
        type: 'text';
        text: string;
    }>;
};
export type WxflowsTool = {
    type: 'function';
    __typename: 'TC_GraphQL' | string;
    function: {
        name: string;
        description?: string;
        parameters?: {
            type: 'string' | 'boolean' | 'object' | 'number';
            properties?: WxflowsToolProperties;
            required?: string[];
        };
    };
};
export type WxflowsToolProperties = {
    [name: string]: {
        type: 'string' | 'boolean' | 'object' | 'number';
        description: string;
    };
};
export type OpenAIChatContent = {
    finish_reason?: string;
    index?: number;
    message?: ChatMessage;
};
export type WxflowsToolCall = {
    function?: WxflowsFunctionCall;
    id?: string;
    type?: string;
};
export type WxflowsFunctionCall = {
    arguments?: string;
    name?: string;
    result?: WxflowsFunctionResult;
};
export type WxflowsFunctionResult = {
    data?: any;
    errors?: Array<{
        message?: string;
        path?: Array<any>;
    }>;
};
export declare function fetchTools({ endpoint, apikey, }: {
    endpoint: string;
    apikey?: string;
}): Promise<WxflowsTool[]>;
export declare function createChatSystemPrompt(tools: WxflowsTool[]): string;
export declare function fetchOpenAIChatContent({ endpoint, apikey, messages, tools, }: {
    endpoint: string;
    apikey?: string;
    messages: ChatMessage[];
    tools: WxflowsTool[];
}): Promise<ChatMessage>;
//# sourceMappingURL=chat.d.ts.map