import { type ChatMessage, type WxflowsTool } from './chat.js';
import { RagVars } from './rag.js';
export interface WxflowsProps {
    endpoint: string;
    apikey?: string;
    flowName?: string;
}
type PromptProps = {
    lc_serializable: true;
    lc_kwargs: {
        value: string;
    };
    lc_namespace: [string];
    value: string;
};
declare class wxflows {
    endpoint: string;
    apikey?: string;
    flowName?: string;
    vars?: {
        rag?: RagVars;
    };
    private _tools?;
    get tools(): Promise<WxflowsTool[]>;
    constructor({ endpoint, apikey, flowName }: WxflowsProps);
    execGraphQL: <R = unknown>(document: string, variables?: Record<string, any>) => Promise<{
        result: R;
        error?: undefined;
    } | {
        error: string;
    }>;
    execTool: <R = unknown>(name: string, toolArguments: {
        [key: string]: unknown;
        query?: string | undefined;
    }) => Promise<{
        result: R;
        error?: undefined;
    } | {
        error: string;
    }>;
    flow: ({ schema, flowName, variables, query, }: {
        schema: string;
        flowName?: string | undefined;
        variables?: RagVars | undefined;
        query?: string | undefined;
    }) => Promise<string | {
        data: unknown;
        extensions: unknown;
    }>;
    generate: () => Promise<string>;
    getFields: ({ schema }: {
        schema: string;
    }) => string;
    ragAnswer: ({ schema, flowName, variables, query, }: {
        schema: string;
        flowName?: string | undefined;
        variables?: RagVars | undefined;
        query?: string | undefined;
    }) => Promise<string | {
        data: unknown;
        extensions: unknown;
    }>;
    chatContent(field: string, messages: ChatMessage[]): Promise<ChatMessage>;
    call(prompt: PromptProps): Promise<string | {
        data: unknown;
        extensions: unknown;
    }>;
    pipe(): wxflows;
    invoke(prompt: PromptProps): Promise<string | {
        data: unknown;
        extensions: unknown;
    }>;
}
export declare const executeFlow: ({ flowName, variables, endpoint, apikey, query, }: {
    flowName: string;
    variables?: Record<string, any> | undefined;
    endpoint?: string | undefined;
    apikey?: string | undefined;
    query?: string | undefined;
}) => Promise<string | {
    data: unknown;
    extensions: unknown;
}>;
export default wxflows;
//# sourceMappingURL=wxflows.d.ts.map